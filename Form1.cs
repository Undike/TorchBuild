using System.Text.Json;
using TorchBuild.Models;

namespace TorchBuild
{
    public partial class Form1 : Form
    {
        private FlowLayoutPanel heroPanel;
        private Label heroInfoLabel;
        private PictureBox selectedHeroPic;
        public Form1()
        {
            InitializeComponent();
            InitializeLayout();
        }

        private void InitializeLayout()
        {
            // üîπ –ü–∞–Ω–µ–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (–∑–∞–≥–æ–ª–æ–≤–æ–∫ "–í—ã–±–æ—Ä –≥–µ—Ä–æ—è")
            Panel textPanel = new Panel
            {
                Dock = DockStyle.Top,
                Height = 80,
                BackColor = Color.LightGray,
                Padding = new Padding(10)
            };
            Controls.Add(textPanel);

            heroInfoLabel = new Label
            {
                Dock = DockStyle.Fill,
                Font = new Font("Arial", 18, FontStyle.Bold),
                Text = "–í—ã–±–æ—Ä –≥–µ—Ä–æ—è",
                TextAlign = ContentAlignment.MiddleCenter,
            };
            textPanel.Controls.Add(heroInfoLabel);

            textPanel.Padding = new Padding(0, 0, 0, 30); // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º

            FlowLayoutPanel heroPanel = new FlowLayoutPanel
            {
                Dock = DockStyle.Top, // –†–∞–∑–º–µ—â–∞–µ–º –Ω–∏–∂–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
                AutoSize = true,
                WrapContents = true,
                FlowDirection = FlowDirection.LeftToRight,
                Padding = new Padding(10),
            };
            Controls.Add(heroPanel);
            heroPanel.Location = new Point(heroPanel.Location.X, textPanel.Bottom + 20); // –°–º–µ—â–∞–µ–º –≤—Ä—É—á–Ω—É—é –Ω–∏–∂–µ —Ç–µ–∫—Å—Ç–∞


            LoadHeroes(heroPanel); // –ü–µ—Ä–µ–¥–∞—ë–º `FlowLayoutPanel` –≤–º–µ—Å—Ç–æ `TableLayoutPanel`
        }

        private void LoadHeroes(FlowLayoutPanel heroPanel) // –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º FlowLayoutPanel
        {
            string basePath = Path.GetFullPath(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @"..\..\.."));
            string jsonPath = Path.Combine(basePath, "Data", "Heroes", "Heroes.json");

            if (!File.Exists(jsonPath))
            {
                MessageBox.Show($"–§–∞–π–ª JSON –Ω–µ –Ω–∞–π–¥–µ–Ω: {jsonPath}");
                return;
            }

            string json = File.ReadAllText(jsonPath);
            using JsonDocument doc = JsonDocument.Parse(json);
            var heroes = JsonSerializer.Deserialize<List<Hero>>(doc.RootElement.GetProperty("heroes").ToString());

            if (heroes == null || heroes.Count == 0)
            {
                MessageBox.Show("–ì–µ—Ä–æ–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
                return;
            }

            foreach (var hero in heroes)
            {
                string imgPath = Path.Combine(basePath, hero.SubClasses.FirstOrDefault()?.ImagePath ?? "");
                PictureBox heroPic = new PictureBox
                {
                    Size = new Size(100, 100),
                    BorderStyle = BorderStyle.FixedSingle,
                    SizeMode = PictureBoxSizeMode.Zoom,
                    Cursor = Cursors.Hand,
                    Tag = hero
                };

                if (File.Exists(imgPath))
                {
                    heroPic.Image = Image.FromFile(imgPath);
                }
                else
                {
                    heroPic.BackColor = Color.Gray;
                }

                heroPic.Click += Hero_Click;
                heroPanel.Controls.Add(heroPic); // –ó–∞–º–µ–Ω—è–µ–º `.Add(heroPic, col, row)` –Ω–∞ `.Add(heroPic)`
            }
        }



        private void Hero_Click(object sender, EventArgs e)
        {
            if (sender is PictureBox picBox && picBox.Tag is Hero selectedHero)
            {
                heroInfoLabel.Text = $"{selectedHero.Name}: {string.Join(", ", selectedHero.SubClasses.Select(s => s.Name))}";

                // üîπ –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≥–µ—Ä–æ—è
                if (selectedHeroPic != null)
                {
                    selectedHeroPic.Paint -= HeroPic_Paint; // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Ä–∞–º–∫–∏
                    selectedHeroPic.Invalidate(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –±–µ–∑ –≤—ã–¥–µ–ª–µ–Ω–∏—è
                }

                // üîπ –í—ã–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è
                selectedHeroPic = picBox;
                selectedHeroPic.Paint += HeroPic_Paint; // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Ä–∞–º–∫–∏
                selectedHeroPic.Invalidate(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            }
        }

        // üîπ –†–∏—Å—É–µ–º —Ä–∞–º–∫—É –≤—Ä—É—á–Ω—É—é
        private void HeroPic_Paint(object sender, PaintEventArgs e)
        {
            if (sender is PictureBox picBox)
            {
                using (Pen pen = new Pen(Color.Black, 12)) // –¶–≤–µ—Ç –∏ —Ç–æ–ª—â–∏–Ω–∞ —Ä–∞–º–∫–∏
                {
                    e.Graphics.DrawRectangle(pen, 0, 0, picBox.Width - 1, picBox.Height - 1);
                }
            }
        }



        private void Form1_Load(object sender, EventArgs e)
        {

        }
    }
}
//using JsonDocument doc = JsonDocument.Parse(json);
//var heroes = JsonSerializer.Deserialize<List<Hero>>(doc.RootElement.GetProperty("heroes").ToString());


//Label skillInfoLabel = new Label
//{
//    Dock = DockStyle.Top,
//    Font = new Font("Arial", 12),
//    TextAlign = ContentAlignment.MiddleCenter
//};

//// üîπ –ù–∞–≤–µ–¥–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç –Ω–∞–≤—ã–∫–∞
//skillIcon.MouseEnter += (s, e) => skill.ShowSkillInfo(skillInfoLabel);

//// üîπ –£—Ö–æ–¥ –∫—É—Ä—Å–æ—Ä–∞ ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
//skillIcon.MouseLeave += (s, e) => skill.HideSkillInfo(skillInfoLabel);
